version: "3"

services:
  broker-service: #gateway
    image: broker
    container_name: broker-service
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:80" #hit the port of the api (8080) and set the port in the docker (80)
    deploy: # just one replicas (but after when use server discovery, is gona change that)
      mode: replicated
      replicas: 1

  logger-service:
    image: logger
    container_name: logger-service
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy: # just one replicas (but after when use server discovery, is gona change that)
      mode: replicated
      replicas: 1

  mailer-service:
    image: mail
    container_name: mailer-service
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    deploy: # just one replicas (but after when use server discovery, is gona change that)
      mode: replicated
      replicas: 1
    env_file:
      - .env
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_NAME: "Mario el Mario"
      MAIL_ADDRESS: "mario.mario@luigi.com"

  authentication-service:
    image: auth
    container_name: auth-service
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  listener-service:
    image: listener
    container_name: listener-service
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    deploy:
      mode: replicated
      replicas: 1

  postgres:
    container_name: postgres
    image: "postgres:14.0"
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  mongo:
    container_name: mongo
    image: "mongo:4.2.16-bionic"
    ports:
      - "27017:27017"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  mailhog:
    container_name: mailhog
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"

  # 3.12.10-alpine, 3.12-alpine, 3-alpine, alpine
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - "RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG"
      - "RABBITMQ_DEFAULT_USER=rabbitmq"
      - "RABBITMQ_DEFAULT_PASS=rabbitmq"
      - "RABBITMQ_DEFAULT_VHOST=/"
    ports:
      - 15672:15672 # UI  -> localhost:15672
      - 5672:5672 # AMQP -> Aplications
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/
